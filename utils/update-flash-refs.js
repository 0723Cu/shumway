/* -*- Mode: js; js-indent-level: 2; indent-tabs-mode: nil; tab-width: 2 -*- */
/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */
/*
 * Copyright 2013 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var fs = require('fs');
var path = require('path');

function updateLibRefs(filePath, manifestPath, lib) {
  var content = fs.readFileSync(filePath, 'utf8');
  var m = new RegExp('\\n([\\t\\u0020]+)<!-- Autogenerated ' + lib + ' references: base=(\\S+)').exec(content);
  if (!m) {
    throw new Error(filePath + ' has no ' + lib + ' references');
  }

  var baseUrl = m[2], indent = m[1];
  var lineStart = indent + '<script src="' + baseUrl;
  var lineEnd = '"></script>';

  var entries = fs.readFileSync(manifestPath).toString().split(/\r?\n/g);

  content = content.replace(new RegExp('(Autogenerated ' + lib + ' references:.*?\\n)[\\S\\s]*?(\\n[ \t]+<!-- Autogenerated ' + lib + ' references end)'),
    function (all, head, tail) {
      return head + entries.map(function (entry) {
        if (entry.trim() === '') {
          return '';
        }
        if (entry[0] !== '#') {
          return indent + '<script src="' + baseUrl + entry + '"></script>';
        }
        if (entry[1] === '!') {
          if (entry.indexOf('#!inline ') === 0) {
            return indent + '<script> ' + entry.substr(9).trim() + ' </script>';
          }
          console.error('Skipping unknown ' + entry);
          return;
        }
        if (entry[1] === '#') {
          return indent + '<!-- ' + entry.substr(2).trim() + ' -->';
        }
        if (entry[1] !== ' ') {
          return indent + '<!--<script src="' + baseUrl + entry.substr(1) + '"></script>-->';
        }
        return '';
      }).join('\n') + tail;
    }
  );

  fs.writeFileSync(filePath, content, 'utf8');
}

function updateJSLibRefs(filePath, manifestPath, lib) {
  var content = fs.readFileSync(filePath, 'utf8');
  var m = new RegExp('<!-- Autogenerated ' + lib + ' references: base=(\\S+)').exec(content);
  if (!m) {
    throw new Error(filePath + ' has no ' + lib + ' references');
  }

  var baseUrl = m[1], indent = "";
  var lineStart = indent + '<script src="' + baseUrl;
  var lineEnd = '"></script>';

  var entries = fs.readFileSync(manifestPath).toString().split(/\r?\n/g);

  content = content.replace(new RegExp('(Autogenerated ' + lib + ' references:.*?\\n)[\\S\\s]*?(\\n<!-- Autogenerated ' + lib + ' references end)'),
    function (all, head, tail) {
      return head + entries.map(function (entry) {
        if (entry.trim() === '') {
          return '';
        }
        if (entry[0] !== '#') {
          return indent + 'load("' + baseUrl + entry + '");';
        }
        if (entry[1] === '!') {
          if (entry.indexOf('#!inline ') === 0) {
            return indent + entry.substr(9).trim();
          }
          console.error('Skipping unknown ' + entry);
          return;
        }
        if (entry[1] === '#') {
          return indent + '// ' + entry.substr(2).trim();
        }
        if (entry[1] !== ' ') {
          return indent + '//' + baseUrl + entry.substr(1);
        }
        return '';
      }).join('\n') + tail;
    }
  );

  fs.writeFileSync(filePath, content, 'utf8');
}

function endsWith(string, value) {
  return string.substring(string.length - value.length, string.length) === value;
}

var packageFilesBase = path.join(__dirname, '../src/');

function updateFlashRefs(filePath, srcDir, includes) {
  var updateFn = endsWith(filePath, ".js") ? updateJSLibRefs : updateLibRefs;
  if (includes.shared) {
    updateFn(filePath, path.join(packageFilesBase, '/shumway.package'), 'shared');
  }
  if (includes.gfx) {
    updateFn(filePath, path.join(packageFilesBase, '/shumway.gfx.package'), 'gfx');
  }
  if (includes.player) {
    updateFn(filePath, path.join(packageFilesBase, '/shumway.player.package'), 'player');
  }
}

module.exports = updateFlashRefs;
